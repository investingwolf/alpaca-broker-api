/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Contact } from './contact';
import { Disclosures } from './disclosures';
import { Identity } from './identity';
import { TrustedContact } from './trustedContact';

export class AccountUpdate {
    /**
    * at least one of `email_address`, `phone_number` or `street_address` is required 
    */
    'emailAddress'?: string;
    /**
    * at least one of `email_address`, `phone_number` or `street_address` is required 
    */
    'phoneNumber'?: string;
    /**
    * at least one of `email_address`, `phone_number` or `street_address` is required 
    */
    'streetAddress'?: Array<string>;
    /**
    * required if `street_address` is set 
    */
    'city'?: string;
    /**
    * required if `street_address` is set 
    */
    'state'?: string;
    /**
    * required if `street_address` is set 
    */
    'postalCode'?: string;
    /**
    * [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html). required if `street_address` is set 
    */
    'country'?: string;
    'givenName': string;
    'familyName': string;
    'dateOfBirth': string;
    'taxId'?: string;
    'taxIdType'?: AccountUpdate.TaxIdTypeEnum;
    /**
    * [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html). 
    */
    'countryOfCitizenship'?: string;
    /**
    * [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html). 
    */
    'countryOfBirth'?: string;
    /**
    * [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html). 
    */
    'countryOfTaxResidence': string;
    'fundingSource': Array<AccountUpdate.FundingSourceEnum>;
    'annualIncomeMin'?: number;
    'annualIncomeMax'?: number;
    'liquidNetWorthMin'?: number;
    'liquidNetWorthMax'?: number;
    'totalNetWorthMin'?: number;
    'totalNetWorthMax'?: number;
    /**
    * any extra information used for KYC purposes 
    */
    'extra'?: object;
    'employmentStatus'?: AccountUpdate.EmploymentStatusEnum;
    'employerName'?: string;
    'employerAddress'?: string;
    'employmentPosition'?: string;
    'isControlPerson': boolean;
    'isAffiliatedExchangeOrFinra': boolean;
    'isPoliticallyExposed': boolean;
    'immediateFamilyExposed': boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "emailAddress",
            "baseName": "email_address",
            "type": "string"
        },
        {
            "name": "phoneNumber",
            "baseName": "phone_number",
            "type": "string"
        },
        {
            "name": "streetAddress",
            "baseName": "street_address",
            "type": "Array<string>"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "givenName",
            "baseName": "given_name",
            "type": "string"
        },
        {
            "name": "familyName",
            "baseName": "family_name",
            "type": "string"
        },
        {
            "name": "dateOfBirth",
            "baseName": "date_of_birth",
            "type": "string"
        },
        {
            "name": "taxId",
            "baseName": "tax_id",
            "type": "string"
        },
        {
            "name": "taxIdType",
            "baseName": "tax_id_type",
            "type": "AccountUpdate.TaxIdTypeEnum"
        },
        {
            "name": "countryOfCitizenship",
            "baseName": "country_of_citizenship",
            "type": "string"
        },
        {
            "name": "countryOfBirth",
            "baseName": "country_of_birth",
            "type": "string"
        },
        {
            "name": "countryOfTaxResidence",
            "baseName": "country_of_tax_residence",
            "type": "string"
        },
        {
            "name": "fundingSource",
            "baseName": "funding_source",
            "type": "Array<AccountUpdate.FundingSourceEnum>"
        },
        {
            "name": "annualIncomeMin",
            "baseName": "annual_income_min",
            "type": "number"
        },
        {
            "name": "annualIncomeMax",
            "baseName": "annual_income_max",
            "type": "number"
        },
        {
            "name": "liquidNetWorthMin",
            "baseName": "liquid_net_worth_min",
            "type": "number"
        },
        {
            "name": "liquidNetWorthMax",
            "baseName": "liquid_net_worth_max",
            "type": "number"
        },
        {
            "name": "totalNetWorthMin",
            "baseName": "total_net_worth_min",
            "type": "number"
        },
        {
            "name": "totalNetWorthMax",
            "baseName": "total_net_worth_max",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "object"
        },
        {
            "name": "employmentStatus",
            "baseName": "employment_status",
            "type": "AccountUpdate.EmploymentStatusEnum"
        },
        {
            "name": "employerName",
            "baseName": "employer_name",
            "type": "string"
        },
        {
            "name": "employerAddress",
            "baseName": "employer_address",
            "type": "string"
        },
        {
            "name": "employmentPosition",
            "baseName": "employment_position",
            "type": "string"
        },
        {
            "name": "isControlPerson",
            "baseName": "is_control_person",
            "type": "boolean"
        },
        {
            "name": "isAffiliatedExchangeOrFinra",
            "baseName": "is_affiliated_exchange_or_finra",
            "type": "boolean"
        },
        {
            "name": "isPoliticallyExposed",
            "baseName": "is_politically_exposed",
            "type": "boolean"
        },
        {
            "name": "immediateFamilyExposed",
            "baseName": "immediate_family_exposed",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return AccountUpdate.attributeTypeMap;
    }
}

export namespace AccountUpdate {
    export enum TaxIdTypeEnum {
        UsaSsn = <any> 'USA_SSN',
        AusTfn = <any> 'AUS_TFN',
        AusAbn = <any> 'AUS_ABN',
        DeuTaxId = <any> 'DEU_TAX_ID',
        FraSpi = <any> 'FRA_SPI',
        GbrUtr = <any> 'GBR_UTR',
        GbrNino = <any> 'GBR_NINO',
        HunTin = <any> 'HUN_TIN',
        IndPan = <any> 'IND_PAN',
        IsrTaxId = <any> 'ISR_TAX_ID',
        ItaTaxId = <any> 'ITA_TAX_ID',
        JpnTaxId = <any> 'JPN_TAX_ID',
        NldTin = <any> 'NLD_TIN',
        SgpNric = <any> 'SGP_NRIC',
        SgpFin = <any> 'SGP_FIN',
        SgpAsgd = <any> 'SGP_ASGD',
        SgpItr = <any> 'SGP_ITR',
        SweTaxId = <any> 'SWE_TAX_ID',
        NotSpecified = <any> 'NOT_SPECIFIED'
    }
    export enum FundingSourceEnum {
        EmploymentIncome = <any> 'employment_income',
        Investments = <any> 'investments',
        Inheritance = <any> 'inheritance',
        BusinessIncome = <any> 'business_income',
        Savings = <any> 'savings',
        Family = <any> 'family'
    }
    export enum EmploymentStatusEnum {
        Unemployed = <any> 'unemployed',
        Employed = <any> 'employed',
        Student = <any> 'student',
        Retired = <any> 'retired'
    }
}
